python3 model/ref/combined-tree-formatter.py "." "model/ref/structure/file-structure.txt" "model/ref/structure/formatted-tree.txt"

# 结构化数据生成器实现方案

## 功能概述

结构化数据生成器是一个全新的功能模块，允许用户通过图形界面生成符合Google和Schema.org标准的结构化数据。支持多种常见的结构化数据类型，包括文章、产品、事件、FAQ、操作指南等。

## 核心特性

### 1. 支持的结构化数据类型
- **Article** - 文章/博客内容
- **Breadcrumb** - 面包屑导航
- **Event** - 事件活动
- **FAQPage** - 常见问题页面
- **HowTo** - 操作指南
- **Organization** - 组织机构
- **Person** - 人物信息
- **Product** - 产品信息
- **VideoObject** - 视频内容
- **WebSite** - 网站信息

### 2. 主要功能
- 📝 **智能表单** - 根据选择的类型自动生成对应的表单字段
- 👁️ **实时预览** - 填写数据时可实时预览生成的结构化数据
- ✅ **数据验证** - 验证数据完整性和格式正确性
- 💾 **配置管理** - 保存和加载常用配置
- 📤 **多格式导出** - 支持JSON-LD和HTML Script标签格式
- 🔍 **在线验证** - 集成Google富媒体结果测试工具

### 3. 技术标准
- 完全符合**Google结构化数据要求**
- 遵循**Schema.org**标准规范
- 生成的代码可直接在网站中使用

## 技术架构

### 后端实现 (Python/FastAPI)

#### 核心处理器
```
backend/app/core/schema/
├── __init__.py
└── schema_processor.py    # 核心业务逻辑
```

**主要功能：**
- 结构化数据生成和验证
- 支持10种常见Schema类型
- JSON-LD和HTML格式输出
- 数据完整性检查

#### API路由
```
backend/app/api/v1/router.py  # 新增Schema相关路由
```

**提供的API端点：**
- `GET /v1/schema/types` - 获取支持的类型
- `GET /v1/schema/template/{type}` - 获取模板
- `POST /v1/schema/generate` - 生成结构化数据
- `POST /v1/schema/validate` - 验证数据
- `POST /v1/schema/preview` - 预览功能

### 前端实现 (React/Next.js)

#### 页面结构
```
frontend/src/app/(dashboard)/schema/
├── page.tsx          # 主页面
└── loading.tsx       # 加载状态
```

#### 组件架构
```
frontend/src/components/schema/
├── schema-type-selector.tsx    # 类型选择器
├── schema-form.tsx            # 动态表单
├── schema-preview.tsx         # 预览组件
├── schema-output.tsx          # 输出展示
├── schema-validation.tsx      # 验证结果
└── schema-save-load.tsx       # 配置管理
```

#### API客户端和Hooks
```
frontend/src/lib/api/schema-api.ts     # API客户端
frontend/src/hooks/use-schema-api.ts   # 状态管理
```

#### 类型定义
```
frontend/src/types/index.ts    # 新增Schema相关类型
```

## 用户界面设计

### 1. 主页面布局
- **左侧：** 类型选择器 + 表单编辑器 + 配置管理
- **右侧：** 实时预览 + 输出结果 + 验证信息

### 2. 工作流程
1. **选择类型** - 从10种Schema类型中选择
2. **填写表单** - 根据必填/可选字段填写数据
3. **实时预览** - 查看生成的结构化数据
4. **验证数据** - 检查数据完整性
5. **生成输出** - 获取JSON-LD或HTML格式代码
6. **保存配置** - 保存常用配置以便复用

### 3. 交互特性
- **响应式设计** - 适配桌面和移动端
- **实时反馈** - 即时显示验证结果和预览
- **智能表单** - 支持数组、对象等复杂数据结构
- **一键复制** - 快速复制生成的代码
- **配置管理** - 本地存储常用配置

## 数据流程

### 1. 类型选择流程
```
用户选择Schema类型 → 获取对应模板 → 初始化表单数据
```

### 2. 数据编辑流程
```
用户填写表单 → 实时预览更新 → 可选验证检查
```

### 3. 生成输出流程
```
提交表单数据 → 后端处理生成 → 返回JSON-LD和HTML格式
```

## 文件结构变更

### 新增后端文件
```
backend/app/core/schema/
├── __init__.py                # 模块初始化
└── schema_processor.py        # 核心处理器

backend/app/api/v1/router.py   # 添加Schema路由
```

### 新增前端文件
```
frontend/src/app/(dashboard)/schema/
├── page.tsx                   # 主页面
└── loading.tsx               # 加载页面

frontend/src/components/schema/
├── schema-type-selector.tsx   # 类型选择器
├── schema-form.tsx           # 动态表单
├── schema-preview.tsx        # 预览组件
├── schema-output.tsx         # 输出组件
├── schema-validation.tsx     # 验证组件
└── schema-save-load.tsx      # 配置管理

frontend/src/lib/api/schema-api.ts     # API客户端
frontend/src/hooks/use-schema-api.ts   # Hooks
frontend/src/components/ui/textarea.tsx # Textarea组件
```

### 修改的现有文件
```
frontend/src/types/index.ts           # 添加Schema类型定义
frontend/src/components/site-header.tsx  # 添加导航链接
frontend/src/app/page.tsx            # 添加功能卡片
```

## 部署说明

### 1. 后端部署
```bash
# 安装依赖（如果有新增）
pip install -r requirements.txt

# 重启后端服务
```

### 2. 前端部署
```bash
# 安装依赖（如果有新增）
npm install

# 重新构建
npm run build
```

### 3. 数据库
无需数据库变更，配置存储在浏览器localStorage中。

## 扩展性设计

### 1. 新增Schema类型
只需在`schema_processor.py`中：
- 添加类型定义到`supported_schemas`
- 实现对应的生成方法
- 更新前端类型定义

### 2. 自定义字段
可通过修改`SCHEMA_FIELD_CONFIGS`轻松添加新字段类型。

### 3. 验证规则
可在处理器中扩展验证逻辑，支持更复杂的业务规则。

## 质量保证

### 1. 标准兼容性
- ✅ Google结构化数据测试工具验证
- ✅ Schema.org标准规范遵循
- ✅ JSON-LD格式正确性

### 2. 用户体验
- ✅ 响应式设计适配各种设备
- ✅ 加载状态和错误处理
- ✅ 直观的操作流程

### 3. 代码质量
- ✅ TypeScript类型安全
- ✅ 组件化设计
- ✅ 错误边界处理
- ✅ 性能优化

## 使用示例

### 1. 创建文章结构化数据
1. 选择"Article"类型
2. 填写标题、作者、发布日期等信息
3. 预览生成的JSON-LD
4. 复制HTML代码到网站

### 2. 创建产品结构化数据
1. 选择"Product"类型
2. 填写产品名称、描述、价格等
3. 添加评分和评论信息
4. 生成并验证结构化数据

### 3. 创建FAQ结构化数据
1. 选择"FAQPage"类型
2. 添加问题和答案项
3. 支持多个FAQ条目
4. 导出完整的FAQ结构化数据

## 总结

结构化数据生成器作为一个独立的功能模块，完美集成到现有的数据分析工具平台中。它不仅提供了强大的结构化数据生成能力，还通过直观的用户界面和完善的验证机制，让用户能够轻松创建符合标准的结构化数据，提升网站在搜索引擎中的表现。

该实现方案遵循了项目现有的架构模式，使用相同的技术栈和设计风格，确保了整体的一致性和可维护性。